[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-gh-project"
version = "0.1.0"
description = "MCP server for GitHub project management"
authors = [{name = "Qugnition Labs"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["mcp", "github", "project-management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp>=1.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=1.0.0",
]

[project.scripts]
mcp-gh-project = "mcp_gh_project.server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Consider moving statement to else block
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Single line implicit string concatenation (conflicts with formatter)
    "PLC0415", # Import outside top-level (needed for dynamic imports in tests)
]
unfixable = ["ERA"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["ARG", "PLR2004", "F401", "TRY002"]
"**/tests/**/*.py" = ["ARG", "PLR2004", "F401", "TRY002"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["mcp_gh_project"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true